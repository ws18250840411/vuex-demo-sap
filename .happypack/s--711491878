'use strict';

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Vue;
var version;
var map = window.__VUE_HOT_MAP__ = (0, _create2.default)(null);
var installed = false;
var isBrowserify = false;
var initHookName = 'beforeCreate';

exports.install = function (vue, browserify) {
  if (installed) return;
  installed = true;

  Vue = vue.__esModule ? vue.default : vue;
  version = Vue.version.split('.').map(Number);
  isBrowserify = browserify;

  if (Vue.config._lifecycleHooks.indexOf('init') > -1) {
    initHookName = 'init';
  }

  exports.compatible = version[0] >= 2;
  if (!exports.compatible) {
    console.warn('[HMR] You are using a version of vue-hot-reload-api that is ' + 'only compatible with Vue.js core ^2.0.0.');
    return;
  }
};

exports.createRecord = function (id, options) {
  var Ctor = null;
  if (typeof options === 'function') {
    Ctor = options;
    options = Ctor.options;
  }
  makeOptionsHot(id, options);
  map[id] = {
    Ctor: Vue.extend(options),
    instances: []
  };
};

function makeOptionsHot(id, options) {
  injectHook(options, initHookName, function () {
    map[id].instances.push(this);
  });
  injectHook(options, 'beforeDestroy', function () {
    var instances = map[id].instances;
    instances.splice(instances.indexOf(this), 1);
  });
}

function injectHook(options, name, hook) {
  var existing = options[name];
  options[name] = existing ? Array.isArray(existing) ? existing.concat(hook) : [existing, hook] : [hook];
}

function tryWrap(fn) {
  return function (id, arg) {
    try {
      fn(id, arg);
    } catch (e) {
      console.error(e);
      console.warn('Something went wrong during Vue component hot-reload. Full reload required.');
    }
  };
}

exports.rerender = tryWrap(function (id, options) {
  var record = map[id];
  if (typeof options === 'function') {
    options = options.options;
  }
  record.Ctor.options.render = options.render;
  record.Ctor.options.staticRenderFns = options.staticRenderFns;
  record.instances.slice().forEach(function (instance) {
    instance.$options.render = options.render;
    instance.$options.staticRenderFns = options.staticRenderFns;
    instance._staticTrees = [];
    instance.$forceUpdate();
  });
});

exports.reload = tryWrap(function (id, options) {
  if (typeof options === 'function') {
    options = options.options;
  }
  makeOptionsHot(id, options);
  var record = map[id];
  if (version[1] < 2) {
    record.Ctor.extendOptions = options;
  }
  var newCtor = record.Ctor.super.extend(options);
  record.Ctor.options = newCtor.options;
  record.Ctor.cid = newCtor.cid;
  record.Ctor.prototype = newCtor.prototype;
  if (newCtor.release) {
    newCtor.release();
  }
  record.instances.slice().forEach(function (instance) {
    if (instance.$vnode && instance.$vnode.context) {
      instance.$vnode.context.$forceUpdate();
    } else {
      console.warn('Root or manually mounted instance modified. Full reload required.');
    }
  });
});